schema {
  query: Query
  mutation: Mutations
  subscription: Subscription
}

input ApplicationInput {
  ID: ID
  value: String
  label: String
  version: String
}

type ApplicationType implements Node {
  ID: ID!
  configuration: ConfigurationType
  label: String
  value: String
  version: String
  id: ID!
  dummies(before: String, after: String, first: Int, last: Int, ID: ID, active: Boolean, intent: String, purchases: Int, id: ID): DummyTypeConnection
  problems(before: String, after: String, first: Int, last: Int, ID: ID, attempts: Int, dueDate: String, instructions: String, label: String, number: Int, points: Int, rejectDate: String, startDate: String, value: String, id: ID, scope: ID, solutions: ID, submissions: ID): ProblemTypeConnection
  vulnerability(before: String, after: String, first: Int, last: Int, ID: ID, exploitDbUrl: String, label: String, type: String, value: String, id: ID): VulnerabilityTypeConnection
}

type ApplicationTypeConnection {
  pageInfo: PageInfo!
  edges: [ApplicationTypeEdge]!
}

type ApplicationTypeEdge {
  node: ApplicationType
  cursor: String!
}

input CategoryInput {
  ID: ID
  label: String
  value: String
  color: String
}

type CategoryType implements Node {
  ID: ID!
  color: String
  label: String
  value: String
  id: ID!
}

type CategoryTypeConnection {
  pageInfo: PageInfo!
  edges: [CategoryTypeEdge]!
}

type CategoryTypeEdge {
  node: CategoryType
  cursor: String!
}

input ClusterInput {
  ID: ID
  value: String
  label: String
  status: String
}

type ClusterType implements Node {
  ID: ID!
  label: String
  status: String
  value: String
  id: ID!
  containers(before: String, after: String, first: Int, last: Int, ID: ID, status: String, id: ID): ContainerTypeConnection
}

type ClusterTypeConnection {
  pageInfo: PageInfo!
  edges: [ClusterTypeEdge]!
}

type ClusterTypeEdge {
  node: ClusterType
  cursor: String!
}

input CompanyInput {
  ID: ID
  name: String
  value: String
}

type CompanyType implements Node {
  ID: ID!
  id: ID!
  jobs(before: String, after: String, first: Int, last: Int, ID: ID, applyEmail: String, applyLink: String, description: String, minimumRank: Int, payRange: String, qualifications: String, responsibilities: String, id: ID): JobTypeConnection
  managers(before: String, after: String, first: Int, last: Int, ID: ID, admin: Boolean, email: String, level: Int, loggedIn: Boolean, manager: Boolean, recruiter: Boolean, id: ID, rank: ID): UserTypeConnection
}

type CompanyTypeConnection {
  pageInfo: PageInfo!
  edges: [CompanyTypeEdge]!
}

type CompanyTypeEdge {
  node: CompanyType
  cursor: String!
}

input CompetencyInput {
  ID: ID
  name: String
  value: String
}

type CompetencyType implements Node {
  ID: ID!
  label: String
  value: String
  id: ID!
}

type CompetencyTypeConnection {
  pageInfo: PageInfo!
  edges: [CompetencyTypeEdge]!
}

type CompetencyTypeEdge {
  node: CompetencyType
  cursor: String!
}

input ConfigurationInput {
  ID: ID
  name: String
  value: String
}

type ConfigurationType implements Node {
  ID: ID!
  credentals: CredentialType
  port: Int
  url: String
  id: ID!
}

type ConfigurationTypeConnection {
  pageInfo: PageInfo!
  edges: [ConfigurationTypeEdge]!
}

type ConfigurationTypeEdge {
  node: ConfigurationType
  cursor: String!
}

input ContainerInput {
  ID: ID
  name: String
  value: String
}

type ContainerType implements Node {
  ID: ID!
  status: String
  id: ID!
  services(before: String, after: String, first: Int, last: Int, ID: ID, label: String, type: String, value: String, id: ID): ServiceTypeConnection
}

type ContainerTypeConnection {
  pageInfo: PageInfo!
  edges: [ContainerTypeEdge]!
}

type ContainerTypeEdge {
  node: ContainerType
  cursor: String!
}

input CourseInput {
  ID: ID
  title: String
  description: String
  cluster: String
  category: String
  startDate: String
  dueDate: String
  destroyDate: String
}

type CourseType implements Node {
  ID: ID!
  category: CategoryType
  cluster: ClusterType
  description: String
  destroyDate: String
  dueDate: String
  report: ReportType
  startDate: String
  title: String
  id: ID!
}

type CourseTypeConnection {
  pageInfo: PageInfo!
  edges: [CourseTypeEdge]!
}

type CourseTypeEdge {
  node: CourseType
  cursor: String!
}

type CreateApplicationMutation {
  application: ApplicationType
  vulnerability: VulnerabilityType
}

type CreateCategoryMutation {
  category: CategoryType
}

type CreateClusterMutation {
  cluster: ClusterType
}

type CreateCompanyMutation {
  company: CompanyType
}

type CreateCompetencyMutation {
  competency: CompetencyType
}

type CreateConfigurationMutation {
  configuration: ConfigurationType
}

type CreateContainerMutation {
  container: ContainerType
}

type CreateCourseMutation {
  course: CourseType
  category: CategoryType
  cluster: ClusterType
}

type CreateCredentialMutation {
  credential: CredentialType
}

type CreateDummyMutation {
  dummy: DummyType
}

type CreateJobMutation {
  job: JobType
}

type CreateMetricMutation {
  metric: MetricType
}

type CreateProblemMutation {
  problem: ProblemType
}

type CreateRankMutation {
  rank: RankType
}

type CreateReportMutation {
  report: ReportType
}

type CreateScopeMutation {
  scope: ScopeType
}

type CreateServiceMutation {
  service: ServiceType
  application: ApplicationType
}

type CreateSolutionMutation {
  solution: SolutionType
}

type CreateStepMutation {
  step: StepType
}

type CreateSubmissionMutation {
  submission: SubmissionType
}

type CreateTeamMutation {
  team: TeamType
}

type CreateTopicMutation {
  topic: TopicType
}

type CreateUniversityMutation {
  university: UniversityType
}

type CreateUserMutation {
  user: UserType
  company: CompanyType
}

type CreateVulnerabilityMutation {
  vulnerability: VulnerabilityType
}

input CredentialInput {
  ID: ID
  name: String
  value: String
}

type CredentialType implements Node {
  ID: ID!
  password: String
  privateKey: String
  publicKey: String
  username: String
  id: ID!
}

type CredentialTypeConnection {
  pageInfo: PageInfo!
  edges: [CredentialTypeEdge]!
}

type CredentialTypeEdge {
  node: CredentialType
  cursor: String!
}

scalar DateTime

type DeleteApplicationMutation {
  success: Boolean
}

type DeleteCategoryMutation {
  success: Boolean
}

type DeleteClusterMutation {
  success: Boolean
}

type DeleteCompanyMutation {
  success: Boolean
}

type DeleteCompetencyMutation {
  success: Boolean
}

type DeleteConfigurationMutation {
  success: Boolean
}

type DeleteContainerMutation {
  success: Boolean
}

type DeleteCourseMutation {
  success: Boolean
}

type DeleteCredentialMutation {
  success: Boolean
}

type DeleteDummyMutation {
  success: Boolean
}

type DeleteJobMutation {
  success: Boolean
}

type DeleteMetricMutation {
  success: Boolean
}

type DeleteProblemMutation {
  success: Boolean
}

type DeleteRankMutation {
  success: Boolean
}

type DeleteReportMutation {
  success: Boolean
}

type DeleteScopeMutation {
  success: Boolean
}

type DeleteServiceMutation {
  success: Boolean
}

type DeleteSolutionMutation {
  success: Boolean
}

type DeleteStepMutation {
  success: Boolean
}

type DeleteSubmissionMutation {
  success: Boolean
}

type DeleteTeamMutation {
  success: Boolean
}

type DeleteTopicMutation {
  success: Boolean
}

type DeleteUniversityMutation {
  success: Boolean
}

type DeleteUserMutation {
  success: Boolean
}

type DeleteVulnerabilityMutation {
  success: Boolean
}

input DummyInput {
  ID: ID
  name: String
  value: String
}

type DummyType implements Node {
  ID: ID!
  active: Boolean
  intent: String
  purchases: Int
  id: ID!
}

type DummyTypeConnection {
  pageInfo: PageInfo!
  edges: [DummyTypeEdge]!
}

type DummyTypeEdge {
  node: DummyType
  cursor: String!
}

input JobInput {
  ID: ID
  name: String
  value: String
}

type JobType implements Node {
  ID: ID!
  applyEmail: String
  applyLink: String
  description: String
  minimumRank: Int
  payRange: String
  qualifications: String
  responsibilities: String
  id: ID!
  qualified(before: String, after: String, first: Int, last: Int, ID: ID, admin: Boolean, email: String, level: Int, loggedIn: Boolean, manager: Boolean, recruiter: Boolean, id: ID, rank: ID): UserTypeConnection
}

type JobTypeConnection {
  pageInfo: PageInfo!
  edges: [JobTypeEdge]!
}

type JobTypeEdge {
  node: JobType
  cursor: String!
}

input MetricInput {
  ID: ID
  name: String
  value: String
}

type MetricType implements Node {
  ID: ID!
  activeUsers: Int
  downtime: DateTime
  purchases: Int
  revenue: Float
  uptime: DateTime
  id: ID!
}

type MetricTypeConnection {
  pageInfo: PageInfo!
  edges: [MetricTypeEdge]!
}

type MetricTypeEdge {
  node: MetricType
  cursor: String!
}

type Mutations {
  createApplication(applicationData: ApplicationInput!, vulnerabilityData: VulnerabilityInput!): CreateApplicationMutation
  createCategory(categoryData: CategoryInput!): CreateCategoryMutation
  createCluster(clusterData: ClusterInput!): CreateClusterMutation
  createCompany(companyData: CompanyInput!): CreateCompanyMutation
  createCompetency(competencyData: CompetencyInput!): CreateCompetencyMutation
  createContainer(containerData: ContainerInput!): CreateContainerMutation
  createConfiguration(configurationData: ConfigurationInput!): CreateConfigurationMutation
  createCourse(categoryData: CategoryInput, clusterData: ClusterInput, courseData: CourseInput!): CreateCourseMutation
  createCredential(credentialData: CredentialInput!): CreateCredentialMutation
  createDummy(dummyData: DummyInput!): CreateDummyMutation
  createJob(jobData: JobInput!): CreateJobMutation
  createMetric(metricData: MetricInput!): CreateMetricMutation
  createProblem(problemData: ProblemInput!): CreateProblemMutation
  createRank(rankData: RankInput!): CreateRankMutation
  createReport(reportData: ReportInput!): CreateReportMutation
  createScope(scopeData: ScopeInput!): CreateScopeMutation
  createService(applicationData: ApplicationInput, serviceData: ServiceInput!): CreateServiceMutation
  createSolution(solutionData: SolutionInput!): CreateSolutionMutation
  createStep(stepData: StepInput!): CreateStepMutation
  createSubmission(submissionData: SubmissionInput!): CreateSubmissionMutation
  createTeam(teamData: TeamInput!): CreateTeamMutation
  createTopic(topicData: TopicInput!): CreateTopicMutation
  createUniversity(universityData: UniversityInput!): CreateUniversityMutation
  createUser(companyData: CompanyInput!, userData: UserInput!): CreateUserMutation
  createVulnerability(vulnerabilityData: VulnerabilityInput!): CreateVulnerabilityMutation
  updateApplication(applicationData: ApplicationInput!, vulnerabilityData: VulnerabilityInput!): UpdateApplicationMutation
  updateCluster(clusterData: ClusterInput!): UpdateClusterMutation
  updateCompany(companyData: CompanyInput!): UpdateCompanyMutation
  updateCategory(categoryData: CategoryInput!): UpdateCategoryMutation
  updateCompetency(competencyData: CompetencyInput!): UpdateCompetencyMutation
  updateConfiguration(configurationData: ConfigurationInput!): UpdateConfigurationMutation
  updateContainer(containerData: ContainerInput!): UpdateContainerMutation
  updateCourse(categoryData: CategoryInput, clusterData: ClusterInput, courseData: CourseInput!): UpdateCourseMutation
  updateCredential(credentialData: CredentialInput!): UpdateCredentialMutation
  updateDummy(dummyData: DummyInput!): UpdateDummyMutation
  updateJob(jobData: JobInput!): UpdateJobMutation
  updateMetric(metricData: MetricInput!): UpdateMetricMutation
  updateProblem(problemData: ProblemInput!): UpdateProblemMutation
  updateRank(rankData: RankInput!): UpdateRankMutation
  updateReport(reportData: ReportInput!): UpdateReportMutation
  updateScope(scopeData: ScopeInput!): UpdateScopeMutation
  updateService(serviceData: ServiceInput!): UpdateServiceMutation
  updateServiceAddApplication(applicationData: ApplicationInput, serviceData: ServiceInput!): UpdateServiceAddApplicationMutation
  updateServiceDeleteApplication(applicationData: ApplicationInput, serviceData: ServiceInput!): UpdateServiceDeleteApplicationMutation
  updateSolution(solutionData: SolutionInput!): UpdateSolutionMutation
  updateStep(stepData: StepInput!): UpdateStepMutation
  updateSubmission(submissionData: SubmissionInput!): UpdateSubmissionMutation
  updateTeam(teamData: TeamInput!): UpdateTeamMutation
  updateTopic(topicData: TopicInput!): UpdateTopicMutation
  updateUniversity(universityData: UniversityInput!): UpdateUniversityMutation
  updateUser(userData: UserInput!): UpdateUserMutation
  updateVulnerability(vulnerabilityData: VulnerabilityInput!): UpdateVulnerabilityMutation
  deleteApplication(ID: ID): DeleteApplicationMutation
  deleteCategory(ID: ID!): DeleteCategoryMutation
  deleteCluster(ID: ID!): DeleteClusterMutation
  deleteCompany(ID: ID!): DeleteCompanyMutation
  deleteCompetency(ID: ID!): DeleteCompetencyMutation
  deleteConfiguration(ID: ID!): DeleteConfigurationMutation
  deleteContainer(ID: ID!): DeleteContainerMutation
  deleteCourse(ID: ID): DeleteCourseMutation
  deleteCredential(ID: ID!): DeleteCredentialMutation
  deleteDummy(ID: ID!): DeleteDummyMutation
  deleteJob(ID: ID!): DeleteJobMutation
  deleteMetric(ID: ID!): DeleteMetricMutation
  deleteProblem(ID: ID!): DeleteProblemMutation
  deleteRank(ID: ID!): DeleteRankMutation
  deleteReport(ID: ID!): DeleteReportMutation
  deleteScope(ID: ID!): DeleteScopeMutation
  deleteService(ID: ID!): DeleteServiceMutation
  deleteSolution(ID: ID): DeleteSolutionMutation
  deleteStep(ID: ID!): DeleteStepMutation
  deleteSubmission(ID: ID!): DeleteSubmissionMutation
  deleteTeam(ID: ID!): DeleteTeamMutation
  deleteTopic(ID: ID!): DeleteTopicMutation
  deleteUniversity(ID: ID!): DeleteUniversityMutation
  deleteUser(ID: ID!): DeleteUserMutation
  deleteVulnerability(ID: ID!): DeleteVulnerabilityMutation
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input ProblemInput {
  ID: ID
  label: String
  value: String
  number: Int
  points: Int
  instructions: String
  startDate: String
  dueDate: String
  rejectDate: String
}

type ProblemType implements Node {
  ID: ID!
  attempts: Int
  dueDate: String
  instructions: String
  label: String
  number: Int
  points: Int
  rejectDate: String
  scope: ScopeType
  solutions: SolutionType
  startDate: String
  submissions: SubmissionType
  value: String
  id: ID!
}

type ProblemTypeConnection {
  pageInfo: PageInfo!
  edges: [ProblemTypeEdge]!
}

type ProblemTypeEdge {
  node: ProblemType
  cursor: String!
}

type Query {
  base: String
  node(id: ID!): Node
  applications(before: String, after: String, first: Int, last: Int, ID: ID, label: String, value: String, version: String, id: ID, configuration: ID): ApplicationTypeConnection
  categories(before: String, after: String, first: Int, last: Int, ID: ID, color: String, label: String, value: String, id: ID): CategoryTypeConnection
  clusters(before: String, after: String, first: Int, last: Int, ID: ID, label: String, status: String, value: String, id: ID): ClusterTypeConnection
  companies(before: String, after: String, first: Int, last: Int, ID: ID, id: ID): CompanyTypeConnection
  competencies(before: String, after: String, first: Int, last: Int, ID: ID, label: String, value: String, id: ID): CompetencyTypeConnection
  configurations(before: String, after: String, first: Int, last: Int, ID: ID, port: Int, url: String, id: ID, credentals: ID): ConfigurationTypeConnection
  containers(before: String, after: String, first: Int, last: Int, ID: ID, status: String, id: ID): ContainerTypeConnection
  courses(before: String, after: String, first: Int, last: Int, ID: ID, description: String, destroyDate: String, dueDate: String, startDate: String, title: String, id: ID, category: ID, cluster: ID, report: ID): CourseTypeConnection
  credentials(before: String, after: String, first: Int, last: Int, ID: ID, password: String, privateKey: String, publicKey: String, username: String, id: ID): CredentialTypeConnection
  dummies(before: String, after: String, first: Int, last: Int, ID: ID, active: Boolean, intent: String, purchases: Int, id: ID): DummyTypeConnection
  jobs(before: String, after: String, first: Int, last: Int, ID: ID, applyEmail: String, applyLink: String, description: String, minimumRank: Int, payRange: String, qualifications: String, responsibilities: String, id: ID): JobTypeConnection
  metrics(before: String, after: String, first: Int, last: Int, ID: ID, activeUsers: Int, downtime: DateTime, purchases: Int, revenue: Float, uptime: DateTime, id: ID): MetricTypeConnection
  problems(before: String, after: String, first: Int, last: Int, ID: ID, attempts: Int, dueDate: String, instructions: String, label: String, number: Int, points: Int, rejectDate: String, startDate: String, value: String, id: ID, scope: ID, solutions: ID, submissions: ID): ProblemTypeConnection
  ranks(before: String, after: String, first: Int, last: Int, ID: ID, coursesComplete: Int, flagsObtained: Int, position: Int, id: ID): RankTypeConnection
  reports(before: String, after: String, first: Int, last: Int, ID: ID, score: Int, id: ID): ReportTypeConnection
  scopes(before: String, after: String, first: Int, last: Int, ID: ID, label: String, value: String, id: ID, topic: ID): ScopeTypeConnection
  services(before: String, after: String, first: Int, last: Int, ID: ID, label: String, type: String, value: String, id: ID): ServiceTypeConnection
  solutions(before: String, after: String, first: Int, last: Int, ID: ID, label: String, value: String, id: ID): SolutionTypeConnection
  steps(before: String, after: String, first: Int, last: Int, ID: ID, content: String, title: String, id: ID): StepTypeConnection
  submissions(before: String, after: String, first: Int, last: Int, ID: ID, author: String, content: String, creationTime: String, points: Int, relativeTime: String, verdict: String, id: ID): SubmissionTypeConnection
  teams(before: String, after: String, first: Int, last: Int, ID: ID, id: ID): TeamTypeConnection
  topics(before: String, after: String, first: Int, last: Int, ID: ID, label: String, value: String, id: ID, competency: ID): TopicTypeConnection
  universities(before: String, after: String, first: Int, last: Int, ID: ID, domain: String, id: ID, team: ID): UniversityTypeConnection
  users(before: String, after: String, first: Int, last: Int, ID: ID, admin: Boolean, email: String, level: Int, loggedIn: Boolean, manager: Boolean, recruiter: Boolean, id: ID, rank: ID): UserTypeConnection
  vulnerabilities(before: String, after: String, first: Int, last: Int, ID: ID, exploitDbUrl: String, label: String, type: String, value: String, id: ID): VulnerabilityTypeConnection
  applicationsList: [ApplicationType]
  clustersList: [ClusterType]
  companiesList: [CompanyType]
  containersList: [ContainerType]
  configurationsList: [ConfigurationType]
  credentialsList: [CredentialType]
  categoriesList: [CategoryType]
  competenciesList: [CompetencyType]
  coursesList: [CourseType]
  dummiesList: [DummyType]
  jobsList: [JobType]
  metricsList: [MetricType]
  problemsList: [ProblemType]
  ranksList: [RankType]
  reportsList: [ReportType]
  scopesList: [ScopeType]
  servicesList: [ServiceType]
  solutionsList: [SolutionType]
  stepsList: [StepType]
  submissionsList: [SubmissionType]
  teamsList: [TeamType]
  topicsList: [TopicType]
  universitiesList: [UniversityType]
  usersList: [UserType]
  vulnerabilitiesList: [VulnerabilityType]
  application(ID: ID!): ApplicationType
  cluster(ID: ID!): ClusterType
  company(ID: ID!): CompanyType
  container(ID: ID!): ContainerType
  configuration(ID: ID!): ConfigurationType
  credential(ID: ID!): CredentialType
  category(ID: ID!): CategoryType
  competency(ID: ID!): CompetencyType
  course(ID: ID!): CourseType
  dummy(ID: ID!): DummyType
  job(ID: ID!): JobType
  metric(ID: ID!): MetricType
  problem(ID: ID!): ProblemType
  rank(ID: ID!): RankType
  report(ID: ID!): ReportType
  scope(ID: ID!): ScopeType
  service(ID: ID!): ServiceType
  solution(ID: ID!): SolutionType
  step(ID: ID!): StepType
  submission(ID: ID!): SubmissionType
  team(ID: ID!): TeamType
  topic(ID: ID!): TopicType
  university(ID: ID!): UniversityType
  user(ID: ID!): UserType
  vulnerability(ID: ID!): VulnerabilityType
}

type RandomType {
  seconds: Int
  randomInt: Int
}

input RankInput {
  ID: ID
  coursesComplete: Int
  flagsObtained: Int
  position: Int
}

type RankType implements Node {
  ID: ID!
  coursesComplete: Int
  flagsObtained: Int
  position: Int
  id: ID!
}

type RankTypeConnection {
  pageInfo: PageInfo!
  edges: [RankTypeEdge]!
}

type RankTypeEdge {
  node: RankType
  cursor: String!
}

input ReportInput {
  ID: ID
  name: String
  value: String
}

type ReportType implements Node {
  ID: ID!
  score: Int
  id: ID!
}

type ReportTypeConnection {
  pageInfo: PageInfo!
  edges: [ReportTypeEdge]!
}

type ReportTypeEdge {
  node: ReportType
  cursor: String!
}

input ScopeInput {
  ID: ID
  label: String
  value: String
}

type ScopeType implements Node {
  ID: ID!
  label: String
  topic: TopicType
  value: String
  id: ID!
}

type ScopeTypeConnection {
  pageInfo: PageInfo!
  edges: [ScopeTypeEdge]!
}

type ScopeTypeEdge {
  node: ScopeType
  cursor: String!
}

input ServiceInput {
  ID: ID
  label: String
  value: String
  type: String
}

type ServiceType implements Node {
  ID: ID!
  applications(before: String, after: String, first: Int, last: Int, ID: ID, label: String, value: String, version: String, id: ID, configuration: ID): ApplicationTypeConnection
  label: String
  type: String
  value: String
  id: ID!
}

type ServiceTypeConnection {
  pageInfo: PageInfo!
  edges: [ServiceTypeEdge]!
}

type ServiceTypeEdge {
  node: ServiceType
  cursor: String!
}

input SolutionInput {
  ID: ID
  value: String
  label: String
}

type SolutionType implements Node {
  ID: ID!
  label: String
  value: String
  id: ID!
}

type SolutionTypeConnection {
  pageInfo: PageInfo!
  edges: [SolutionTypeEdge]!
}

type SolutionTypeEdge {
  node: SolutionType
  cursor: String!
}

input StepInput {
  ID: ID
  name: String
  value: String
}

type StepType implements Node {
  ID: ID!
  content: String
  title: String
  id: ID!
}

type StepTypeConnection {
  pageInfo: PageInfo!
  edges: [StepTypeEdge]!
}

type StepTypeEdge {
  node: StepType
  cursor: String!
}

input SubmissionInput {
  ID: ID
  author: String
  verdict: String
  creationTime: String
  relativeTime: String
  points: Int
  content: String
}

type SubmissionType implements Node {
  ID: ID!
  author: String
  content: String
  creationTime: String
  points: Int
  relativeTime: String
  verdict: String
  id: ID!
}

type SubmissionTypeConnection {
  pageInfo: PageInfo!
  edges: [SubmissionTypeEdge]!
}

type SubmissionTypeEdge {
  node: SubmissionType
  cursor: String!
}

type Subscription {
  countSeconds(upTo: Int): Int
  randomInt: RandomType
}

input TeamInput {
  ID: ID
  name: String
  value: String
}

type TeamType implements Node {
  ID: ID!
  id: ID!
  members(before: String, after: String, first: Int, last: Int, ID: ID, admin: Boolean, email: String, level: Int, loggedIn: Boolean, manager: Boolean, recruiter: Boolean, id: ID, rank: ID): UserTypeConnection
}

type TeamTypeConnection {
  pageInfo: PageInfo!
  edges: [TeamTypeEdge]!
}

type TeamTypeEdge {
  node: TeamType
  cursor: String!
}

input TopicInput {
  ID: ID
  name: String
  value: String
}

type TopicType implements Node {
  ID: ID!
  competency: CompetencyType
  label: String
  value: String
  id: ID!
}

type TopicTypeConnection {
  pageInfo: PageInfo!
  edges: [TopicTypeEdge]!
}

type TopicTypeEdge {
  node: TopicType
  cursor: String!
}

input UniversityInput {
  ID: ID
  team: ID
  domain: String
}

type UniversityType implements Node {
  ID: ID!
  domain: String
  team: TeamType
  id: ID!
}

type UniversityTypeConnection {
  pageInfo: PageInfo!
  edges: [UniversityTypeEdge]!
}

type UniversityTypeEdge {
  node: UniversityType
  cursor: String!
}

type UpdateApplicationMutation {
  application: ApplicationType
  vulnerability: VulnerabilityType
}

type UpdateCategoryMutation {
  category: CategoryType
}

type UpdateClusterMutation {
  cluster: ClusterType
}

type UpdateCompanyMutation {
  company: CompanyType
}

type UpdateCompetencyMutation {
  competency: CompetencyType
}

type UpdateConfigurationMutation {
  configuration: ConfigurationType
}

type UpdateContainerMutation {
  container: ContainerType
}

type UpdateCourseMutation {
  course: CourseType
  category: CategoryType
  cluster: ClusterType
}

type UpdateCredentialMutation {
  credential: CredentialType
}

type UpdateDummyMutation {
  dummy: DummyType
}

type UpdateJobMutation {
  job: JobType
}

type UpdateMetricMutation {
  metric: MetricType
}

type UpdateProblemMutation {
  problem: ProblemType
}

type UpdateRankMutation {
  rank: RankType
}

type UpdateReportMutation {
  report: ReportType
}

type UpdateScopeMutation {
  scope: ScopeType
}

type UpdateServiceAddApplicationMutation {
  service: ServiceType
  application: ApplicationType
}

type UpdateServiceDeleteApplicationMutation {
  service: ServiceType
  application: ApplicationType
}

type UpdateServiceMutation {
  service: ServiceType
  application: ApplicationType
}

type UpdateSolutionMutation {
  solution: SolutionType
}

type UpdateStepMutation {
  step: StepType
}

type UpdateSubmissionMutation {
  submission: SubmissionType
}

type UpdateTeamMutation {
  team: TeamType
}

type UpdateTopicMutation {
  topic: TopicType
}

type UpdateUniversityMutation {
  university: UniversityType
}

type UpdateUserMutation {
  user: UserType
  company: CompanyType
}

type UpdateVulnerabilityMutation {
  vulnerability: VulnerabilityType
}

input UserInput {
  ID: ID
  handle: String
  email: String
  subscriptionType: Int
  accessControlRole: String
  status: String
}

type UserType implements Node {
  ID: ID!
  admin: Boolean
  email: String
  level: Int
  loggedIn: Boolean
  manager: Boolean
  rank: RankType
  recruiter: Boolean
  id: ID!
}

type UserTypeConnection {
  pageInfo: PageInfo!
  edges: [UserTypeEdge]!
}

type UserTypeEdge {
  node: UserType
  cursor: String!
}

input VulnerabilityInput {
  ID: ID
  value: String
  label: String
  type: String
  exploitDbUrl: String
}

type VulnerabilityType implements Node {
  ID: ID!
  exploitDbUrl: String
  label: String
  type: String
  value: String
  id: ID!
}

type VulnerabilityTypeConnection {
  pageInfo: PageInfo!
  edges: [VulnerabilityTypeEdge]!
}

type VulnerabilityTypeEdge {
  node: VulnerabilityType
  cursor: String!
}
